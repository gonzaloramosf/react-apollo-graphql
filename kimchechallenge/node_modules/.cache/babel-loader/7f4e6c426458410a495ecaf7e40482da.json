{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n  var stateRef = useRef();\n\n  if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {\n    stateRef.current = new InternalState(client, query);\n  }\n\n  var state = stateRef.current;\n\n  var _a = useState(0),\n      _tick = _a[0],\n      setTick = _a[1];\n\n  state.forceUpdate = function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  };\n\n  return state;\n}\n\nvar InternalState = function () {\n  function InternalState(client, query) {\n    this.client = client;\n    this.query = query;\n    this.ssrDisabledResult = maybeDeepFreeze({\n      loading: true,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.loading\n    });\n    this.skipStandbyResult = maybeDeepFreeze({\n      loading: false,\n      data: void 0,\n      error: void 0,\n      networkStatus: NetworkStatus.ready\n    });\n    this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n    verifyDocumentType(query, DocumentType.Query);\n  }\n\n  InternalState.prototype.forceUpdate = function () {};\n\n  InternalState.prototype.useQuery = function (options) {\n    var _this = this;\n\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n    this.useOptions(options);\n    var obsQuery = this.useObservableQuery();\n    var result = useSyncExternalStore(useCallback(function () {\n      if (_this.renderPromises) {\n        return function () {};\n      }\n\n      var onNext = function () {\n        var previousResult = _this.result;\n        var result = obsQuery.getCurrentResult();\n\n        if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && equal(previousResult.data, result.data)) {\n          return;\n        }\n\n        _this.setResult(result);\n      };\n\n      var onError = function (error) {\n        var last = obsQuery[\"last\"];\n        subscription.unsubscribe();\n\n        try {\n          obsQuery.resetLastResults();\n          subscription = obsQuery.subscribe(onNext, onError);\n        } finally {\n          obsQuery[\"last\"] = last;\n        }\n\n        if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n          throw error;\n        }\n\n        var previousResult = _this.result;\n\n        if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {\n          _this.setResult({\n            data: previousResult && previousResult.data,\n            error: error,\n            loading: false,\n            networkStatus: NetworkStatus.error\n          });\n        }\n      };\n\n      var subscription = obsQuery.subscribe(onNext, onError);\n      return function () {\n        return subscription.unsubscribe();\n      };\n    }, [obsQuery, this.renderPromises, this.client.disableNetworkFetches]), function () {\n      return _this.getCurrentResult();\n    }, function () {\n      return _this.getCurrentResult();\n    });\n    this.unsafeHandlePartialRefetch(result);\n    return this.toQueryResult(result);\n  };\n\n  InternalState.prototype.useOptions = function (options) {\n    var _a;\n\n    var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n    var currentWatchQueryOptions = this.watchQueryOptions;\n\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        this.observable.reobserve(watchQueryOptions);\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false) {\n      this.result = this.ssrDisabledResult;\n    } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === 'standby') {\n      this.result = this.skipStandbyResult;\n    } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {\n      this.result = void 0;\n    }\n  };\n\n  InternalState.prototype.createWatchQueryOptions = function (_a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var skip = _a.skip,\n        ssr = _a.ssr,\n        onCompleted = _a.onCompleted,\n        onError = _a.onError,\n        displayName = _a.displayName,\n        defaultOptions = _a.defaultOptions,\n        otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"displayName\", \"defaultOptions\"]);\n\n    var toMerge = [];\n    var globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n    if (defaultOptions) toMerge.push(defaultOptions);\n    var latestOptions = this.observable && this.observable.options;\n\n    if (latestOptions && toMerge.length) {\n      var defaults_1 = toMerge.reduce(mergeOptions, Object.create(null));\n      toMerge.length = 1;\n      toMerge[0] = defaults_1;\n      Object.keys(defaults_1).forEach(function (defaultOptionName) {\n        var currentOptionValue = latestOptions[defaultOptionName];\n\n        if (hasOwnProperty.call(latestOptions, defaultOptionName) && !equal(defaults_1[defaultOptionName], currentOptionValue)) {\n          defaults_1[defaultOptionName] = defaultOptionName === \"variables\" ? __assign(__assign({}, defaults_1.variables), currentOptionValue) : currentOptionValue;\n        }\n      });\n    }\n\n    toMerge.push(otherOptions);\n    var merged = toMerge.reduce(mergeOptions, Object.create(null));\n    var watchQueryOptions = Object.assign(merged, {\n      query: this.query\n    });\n\n    if (this.renderPromises && (watchQueryOptions.fetchPolicy === 'network-only' || watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (skip) {\n      var _b = watchQueryOptions.initialFetchPolicy,\n          initialFetchPolicy = _b === void 0 ? watchQueryOptions.fetchPolicy : _b;\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy: initialFetchPolicy,\n        fetchPolicy: 'standby'\n      });\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {};\n    }\n\n    return watchQueryOptions;\n  };\n\n  InternalState.prototype.onCompleted = function (data) {};\n\n  InternalState.prototype.onError = function (error) {};\n\n  InternalState.prototype.useObservableQuery = function () {\n    var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable || this.client.watchQuery(__assign({}, this.watchQueryOptions));\n    this.obsQueryFields = useMemo(function () {\n      return {\n        refetch: obsQuery.refetch.bind(obsQuery),\n        reobserve: obsQuery.reobserve.bind(obsQuery),\n        fetchMore: obsQuery.fetchMore.bind(obsQuery),\n        updateQuery: obsQuery.updateQuery.bind(obsQuery),\n        startPolling: obsQuery.startPolling.bind(obsQuery),\n        stopPolling: obsQuery.stopPolling.bind(obsQuery),\n        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)\n      };\n    }, [obsQuery]);\n\n    if (this.renderPromises) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n      var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);\n\n      if (ssrAllowed && obsQuery.getCurrentResult().loading) {\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  };\n\n  InternalState.prototype.setResult = function (nextResult) {\n    var previousResult = this.result;\n\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n\n    this.result = nextResult;\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  };\n\n  InternalState.prototype.handleErrorOrCompleted = function (result) {\n    if (!result.loading) {\n      if (result.error) {\n        this.onError(result.error);\n      } else if (result.data) {\n        this.onCompleted(result.data);\n      }\n    }\n  };\n\n  InternalState.prototype.getCurrentResult = function () {\n    if (!this.result) {\n      this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n    }\n\n    return this.result;\n  };\n\n  InternalState.prototype.toQueryResult = function (result) {\n    var queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    var data = result.data,\n        partial = result.partial,\n        resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n\n    this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({\n      data: data\n    }, resultWithoutPartial), this.obsQueryFields), {\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: true,\n      previousData: this.previousData\n    }));\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      queryResult.error = new ApolloError({\n        graphQLErrors: result.errors\n      });\n    }\n\n    return queryResult;\n  };\n\n  InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n    if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== 'cache-only') {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch\n      });\n      this.observable.refetch();\n    }\n  };\n\n  return InternalState;\n}();","map":{"version":3,"sources":["../../../src/react/hooks/useQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n  }\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    return this.toQueryResult(result);\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n    if (!equal(watchQueryOptions, currentWatchQueryOptions)) {\n      this.watchQueryOptions = watchQueryOptions;\n      if (currentWatchQueryOptions && this.observable) {\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(watchQueryOptions);\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // We use the mergeOptions helper function (which uses compact(...) and\n    // shallow-merges variables) to combine globalDefaults with any local\n    // defaultOptions provided to useQuery.\n    const toMerge: Partial<WatchQueryOptions<TVariables, TData>>[] = [];\n\n    // Merge global client.watchQuery default options with the lowest priority.\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    // Next, merge any defaultOptions passed directly to useQuery.\n    if (defaultOptions) toMerge.push(defaultOptions);\n\n    const latestOptions = this.observable && this.observable.options;\n    if (latestOptions && toMerge.length) {\n      // If we already have this.watchQueryOptions, those options should take\n      // precedence over default options of the same name. It might be simpler\n      // to do toMerge.push(this.watchQueryOptions), but that potentially\n      // (re)injects unrelated/unwanted options. Passing Object.create(null) as\n      // the second argument to toMerge.reduce ensures the result is a newly\n      // created object, so we can safely modify it in the forEach loop below.\n      const defaults = toMerge.reduce(mergeOptions, Object.create(null));\n\n      // Compact the toMerge array to hold only the merged defaults. This is\n      // equivalent to toMerge.splice(0, toMerge.length, defaults).\n      toMerge.length = 1;\n      toMerge[0] = defaults;\n\n      Object.keys(defaults).forEach(\n        (defaultOptionName: keyof WatchQueryOptions<TVariables, TData>) => {\n          const currentOptionValue = latestOptions[defaultOptionName];\n          if (\n            hasOwnProperty.call(latestOptions, defaultOptionName) &&\n            !equal(defaults[defaultOptionName], currentOptionValue)\n          ) {\n            // If you keep passing useQuery({ defaultOptions: { variables }}),\n            // those default variables continue to provide their default values\n            // every time, though in most cases this.watchQueryOptions.variables\n            // will have a current value for every default variable name, so the\n            // defaults don't matter. However, if a variable has been removed\n            // from this.watchQueryOptions.variables, future useQuery calls can\n            // restore its default value from defaultOptions.variables.\n            defaults[defaultOptionName] = defaultOptionName === \"variables\"\n              ? { ...defaults.variables, ...currentOptionValue }\n              : currentOptionValue;\n          }\n        },\n      );\n    }\n\n    // Give highest precedence to any non-default WatchQueryOptions passed\n    // directly to useQuery.\n    toMerge.push(otherOptions);\n\n    const merged = toMerge.reduce(mergeOptions, Object.create(null));\n\n    // This Object.assign is safe because merged is the fresh object created by\n    // the Object.create(null) argument to toMerge.reduce.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(merged, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    } else if (!watchQueryOptions.fetchPolicy) {\n      // We applied all available fetchPolicy default values above (from\n      // globalDefaults and defaultOptions), so, if fetchPolicy is still\n      // undefined, fall back to the default default (no typo), cache-first.\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (skip) {\n      const {\n        // The watchQueryOptions.initialFetchPolicy field usually defaults to\n        // watchQueryOptions.fetchPolicy, which has now been properly\n        // defaulted/initialized. However, watchQueryOptions.initialFetchPolicy\n        // can be provided explicitly instead, if more control is desired.\n        initialFetchPolicy = watchQueryOptions.fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    return watchQueryOptions;\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery({\n          ...this.watchQueryOptions,\n        });\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    if (this.renderPromises) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      const ssrAllowed = !(\n        this.queryHookOptions.ssr === false ||\n        this.queryHookOptions.skip\n      );\n\n      if (ssrAllowed && obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      if (result.error) {\n        this.onError(result.error);\n      } else if (result.data) {\n        this.onCompleted(result.data);\n      }\n    }\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: true,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}