{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useRef } from 'react';\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nvar EAGER_METHODS = ['refetch', 'reobserve', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var internalState = useInternalState(useApolloClient(options && options.client), query);\n  var execOptionsRef = useRef();\n  var defaultOptions = internalState.client.defaultOptions.watchQuery;\n  var initialFetchPolicy = options && options.fetchPolicy || execOptionsRef.current && execOptionsRef.current.fetchPolicy || defaultOptions && defaultOptions.fetchPolicy || \"cache-first\";\n  var useQueryResult = internalState.useQuery(__assign(__assign(__assign({}, options), execOptionsRef.current), {\n    skip: !execOptionsRef.current\n  }));\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n\n    var _loop_1 = function (key) {\n      var method = result[key];\n\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdate();\n        }\n\n        return method.apply(this, arguments);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  var execute = useCallback(function (executeOptions) {\n    var promise = result.reobserve(execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    }).then(function (apolloQueryResult) {\n      apolloQueryResult = apolloQueryResult || internalState[\"getCurrentResult\"]();\n\n      if (apolloQueryResult.error || isNonEmptyArray(apolloQueryResult.errors)) {\n        var _a = result.observable.options.errorPolicy,\n            errorPolicy = _a === void 0 ? \"none\" : _a;\n\n        if (errorPolicy === \"none\") {\n          throw apolloQueryResult.error || new ApolloError({\n            graphQLErrors: apolloQueryResult.errors\n          });\n        }\n      }\n\n      return internalState.toQueryResult(apolloQueryResult);\n    }).then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    internalState.forceUpdate();\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useLazyQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { ApolloError } from '../../errors';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\nimport { isNonEmptyArray } from '../../utilities';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const defaultOptions = internalState.client.defaultOptions.watchQuery;\n  const initialFetchPolicy =\n    (options && options.fetchPolicy) ||\n    (execOptionsRef.current && execOptionsRef.current.fetchPolicy) ||\n    (defaultOptions && defaultOptions.fetchPolicy) ||\n    \"cache-first\";\n\n  const useQueryResult = internalState.useQuery({\n    ...options,\n    ...execOptionsRef.current,\n    skip: !execOptionsRef.current,\n  });\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    const promise = result.reobserve(\n      execOptionsRef.current = executeOptions ? {\n        ...executeOptions,\n        fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n      } : {\n        fetchPolicy: initialFetchPolicy,\n      },\n    ).then(apolloQueryResult => {\n      // If this.observable.options.fetchPolicy is \"standby\", the\n      // apolloQueryResult we receive here can be undefined, so we call\n      // getCurrentResult to obtain a stub result.\n      // TODO Investigate whether standby queries could return this stub result\n      // in the first place.\n      apolloQueryResult = apolloQueryResult || internalState[\"getCurrentResult\"]();\n\n      if (\n        apolloQueryResult.error ||\n        isNonEmptyArray(apolloQueryResult.errors)\n      ) {\n        const {\n          errorPolicy = \"none\",\n        } = result.observable.options;\n\n        if (errorPolicy === \"none\") {\n          throw apolloQueryResult.error || new ApolloError({\n            graphQLErrors: apolloQueryResult.errors,\n          });\n        }\n      }\n\n      return internalState.toQueryResult(apolloQueryResult);\n\n    }).then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Deliver the loading state for this reobservation immediately.\n    internalState.forceUpdate();\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}