{"ast":null,"code":"var _jsxFileName = \"/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport GetCountries from \"./Components/GetCountries/GetCountries\"; // catching error graphQL\n\nconst errorLink = onError(({\n  graphqlErrors\n}) => {\n  if (graphqlErrors) {\n    // response if exist an error\n    graphqlErrors.map(({\n      message\n    }) => {\n      return console.log(`Graphql error ${message}`);\n    });\n  }\n}); // link api\n\nconst link = from([errorLink, new HttpLink({\n  uri: \"https://countries.trevorblades.com/\"\n})]); // starting graphQL api\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\n\nconst App = () => {\n  return (\n    /*#__PURE__*/\n    // ApolloProvide for graphQL api\n    React.createElement(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }, \" \", /*#__PURE__*/React.createElement(GetCountries, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }))\n  );\n};\n\nexport default App;","map":{"version":3,"sources":["/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/App.js"],"names":["React","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","from","onError","GetCountries","errorLink","graphqlErrors","map","message","console","log","link","uri","client","cache","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,IALF,QAMO,gBANP;AAOA,SAAQC,OAAR,QAAsB,2BAAtB;AACA,OAAOC,YAAP,MAAyB,wCAAzB,C,CAEA;;AACA,MAAMC,SAAS,GAAGF,OAAO,CAAC,CAAC;AAACG,EAAAA;AAAD,CAAD,KAAqB;AAC7C,MAAIA,aAAJ,EAAmB;AACjB;AACAA,IAAAA,aAAa,CAACC,GAAd,CAAkB,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAe;AAC/B,aAAOC,OAAO,CAACC,GAAR,CAAa,iBAAgBF,OAAQ,EAArC,CAAP;AACD,KAFD;AAGD;AACF,CAPwB,CAAzB,C,CASA;;AACA,MAAMG,IAAI,GAAGT,IAAI,CAAC,CAChBG,SADgB,EAEhB,IAAIJ,QAAJ,CAAa;AAACW,EAAAA,GAAG,EAAE;AAAN,CAAb,CAFgB,CAAD,CAAjB,C,CAKA;;AACA,MAAMC,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC9BgB,EAAAA,KAAK,EAAE,IAAIf,aAAJ,EADuB;AAE9BY,EAAAA,IAAI,EAAEA;AAFwB,CAAjB,CAAf;;AAKA,MAAMI,GAAG,GAAG,MAAM;AAChB;AAAA;AACE;AACA,wBAAC,cAAD;AAAgB,MAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,eAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF;AAFF;AAOD,CARD;;AASA,eAAeE,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from\n} from \"@apollo/client\";\nimport {onError} from \"@apollo/client/link/error\";\nimport GetCountries from \"./Components/GetCountries/GetCountries\";\n\n// catching error graphQL\nconst errorLink = onError(({graphqlErrors}) => {\n  if (graphqlErrors) {\n    // response if exist an error\n    graphqlErrors.map(({message}) => {\n      return console.log(`Graphql error ${message}`);\n    });\n  }\n});\n\n// link api\nconst link = from([\n  errorLink,\n  new HttpLink({uri: \"https://countries.trevorblades.com/\"})\n]);\n\n// starting graphQL api\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link\n});\n\nconst App = () => {\n  return (\n    // ApolloProvide for graphQL api\n    <ApolloProvider client={client}>\n      {\" \"}\n      <GetCountries />\n    </ApolloProvider>\n  )\n};\nexport default App;"]},"metadata":{},"sourceType":"module"}