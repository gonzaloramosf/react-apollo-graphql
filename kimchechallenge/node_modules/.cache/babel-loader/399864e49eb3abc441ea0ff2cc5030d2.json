{"ast":null,"code":"var _jsxFileName = \"/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js\";\nimport React, { useState } from \"react\";\nimport \"./CountrySearch.css\";\n\nconst CountrySearch = ({\n  countries\n}) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, \"Country Search\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, \" Some random text \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchResults\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search country...\",\n    onChange: event => {\n      setSearchTerm(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"groupBy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, \" Group by: \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  }, \" Continent \"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 15\n    }\n  }, \" Language \"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, countries.filter(val => {\n    if (searchTerm === \"\") {\n      return \"\";\n    } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())) {\n      return val;\n    }\n  }).map((val, key) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 19\n      }\n    }, \" \", val.continent.name, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"countryInfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 23\n      }\n    }, val.emoji), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 23\n      }\n    }, \" \", val.name, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, \" Capital: \", val.capital, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }\n    }, \" Currency: \", val.currency, \" \")));\n  }))));\n};\n\nexport default CountrySearch;\n{\n  /* \n  <div className=\"search\">\n  <h1>Country Search</h1>\n  <span> Some random text </span>\n  <div className=\"searchResults\">\n     <input type=\"text\" placeholder=\"Search country...\" onChange={event => {\n         setSearchTerm(event.target.value)\n     }}/>\n     <div className=\"groupBy\">\n         <h2> Group by: </h2>\n         <div>\n             <button> Continent </button>\n             <button> Language </button>\n         </div>\n     </div>\n      <div>\n         {countries.filter((val) => {\n             if (searchTerm === \"\") {\n                 return \"\"\n             } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                 return val\n             }\n         }).map((val, key) => {\n             return (\n                 <div key={key}>\n                     <h2> {val.continent.name} </h2> \n                     <div className=\"countryInfo\">\n                         <div>\n                             <span>{val.emoji}</span>\n                             <h3> {val.name} </h3>\n                         </div>\n                         <p> Capital: {val.capital} </p>\n                         <p> Currency: {val.currency} </p>\n                     </div>\n                 </div>\n             )\n         })\n         }\n     </div>\n  </div>\n  </div> */\n}","map":{"version":3,"sources":["/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js"],"names":["React","useState","CountrySearch","countries","searchTerm","setSearchTerm","event","target","value","filter","val","name","toLowerCase","includes","map","key","continent","emoji","capital","currency"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,qBAAP;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AACnC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AAEF,sBACA;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF,eAGE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,mBAA/B;AAAmD,IAAA,QAAQ,EAAEK,KAAK,IAAI;AAClED,MAAAA,aAAa,CAACC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAIE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CAFJ,CAJF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,SAAS,CAACM,MAAV,CAAkBC,GAAD,IAAS;AACvB,QAAIN,UAAU,KAAK,EAAnB,EAAuB;AACnB,aAAO,EAAP;AACH,KAFD,MAEO,IAAIM,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCT,UAAU,CAACQ,WAAX,EAAhC,CAAJ,EAA8D;AACjE,aAAOF,GAAP;AACH;AACJ,GANA,EAMEI,GANF,CAMM,CAACJ,GAAD,EAAMK,GAAN,KAAc;AACjB,wBACE;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAML,GAAG,CAACM,SAAJ,CAAcL,IAApB,MADF,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,GAAG,CAACO,KAAX,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAMP,GAAG,CAACC,IAAV,MAFF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAcD,GAAG,CAACQ,OAAlB,MALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAeR,GAAG,CAACS,QAAnB,MANF,CAFF,CADF;AAaH,GApBA,CADL,CAXF,CAHF,CADA;AA0CD,CA7CD;;AA8CA,eAAejB,aAAf;AAQA;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCS","sourcesContent":["import React, { useState } from \"react\";\nimport \"./CountrySearch.css\";\n\nconst CountrySearch = ({countries}) => {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n  return (\n  <div className=\"search\">\n    <h1>Country Search</h1>\n    <span> Some random text </span>\n    <div className=\"searchResults\">\n      <input type=\"text\" placeholder=\"Search country...\" onChange={event => {\n          setSearchTerm(event.target.value)\n      }}/>\n      <div className=\"groupBy\">\n          <h2> Group by: </h2>\n          <div>\n              <button> Continent </button>\n              <button> Language </button>\n          </div>\n      </div>\n      <div>\n          {countries.filter((val) => {\n              if (searchTerm === \"\") {\n                  return \"\"\n              } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                  return val\n              }\n          }).map((val, key) => {\n              return (\n                <div key={key}>\n                  <h2> {val.continent.name} </h2> \n                  <div className=\"countryInfo\">\n                    <div>\n                      <span>{val.emoji}</span>\n                      <h3> {val.name} </h3>\n                    </div>\n                    <p> Capital: {val.capital} </p>\n                    <p> Currency: {val.currency} </p>\n                  </div>\n                </div>\n              )\n          })\n          }\n      </div>\n    </div>\n</div>\n);\n}\nexport default CountrySearch;\n\n\n\n\n\n\n\n{/* \n<div className=\"search\">\n<h1>Country Search</h1>\n<span> Some random text </span>\n<div className=\"searchResults\">\n    <input type=\"text\" placeholder=\"Search country...\" onChange={event => {\n        setSearchTerm(event.target.value)\n    }}/>\n    <div className=\"groupBy\">\n        <h2> Group by: </h2>\n        <div>\n            <button> Continent </button>\n            <button> Language </button>\n        </div>\n    </div>\n\n    <div>\n        {countries.filter((val) => {\n            if (searchTerm === \"\") {\n                return \"\"\n            } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                return val\n            }\n        }).map((val, key) => {\n            return (\n                <div key={key}>\n                    <h2> {val.continent.name} </h2> \n                    <div className=\"countryInfo\">\n                        <div>\n                            <span>{val.emoji}</span>\n                            <h3> {val.name} </h3>\n                        </div>\n                        <p> Capital: {val.capital} </p>\n                        <p> Currency: {val.currency} </p>\n                    </div>\n                </div>\n            )\n        })\n        }\n    </div>\n</div>\n</div> */}"]},"metadata":{},"sourceType":"module"}