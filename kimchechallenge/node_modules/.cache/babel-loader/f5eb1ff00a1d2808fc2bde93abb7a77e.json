{"ast":null,"code":"var _jsxFileName = \"/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js\";\nimport React, { useState } from \"react\";\n\nconst CountrySearch = ({\n  countries\n}) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  console.log(countries);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }, \"Country Search\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, \" Some random text \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search country...\",\n    onChange: event => {\n      setSearchTerm(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }), countries.filter(val => {\n    if (searchTerm == \"\") {\n      return \"\";\n    } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())) {\n      return val;\n    }\n  }).map((val, key) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 29\n      }\n    }, \" \", val.name, \" \"));\n  })));\n};\n\nexport default CountrySearch;","map":{"version":3,"sources":["/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js"],"names":["React","useState","CountrySearch","countries","searchTerm","setSearchTerm","console","log","event","target","value","filter","val","name","toLowerCase","includes","map","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AACA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AACnC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AAGAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,mBAA/B;AAAmD,IAAA,QAAQ,EAAEK,KAAK,IAAI;AAClEH,MAAAA,aAAa,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAIKP,SAAS,CAACQ,MAAV,CAAkBC,GAAD,IAAS;AACvB,QAAIR,UAAU,IAAI,EAAlB,EAAsB;AAClB,aAAO,EAAP;AACH,KAFD,MAEO,IAAIQ,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCX,UAAU,CAACU,WAAX,EAAhC,CAAJ,EAA8D;AACjE,aAAOF,GAAP;AACH;AACJ,GANA,EAMEI,GANF,CAMM,CAACJ,GAAD,EAAMK,GAAN,KAAc;AACjB,wBACI;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKL,GAAG,CAACC,IAAT,MADJ,CADJ;AAKH,GAZA,CAJL,CAHJ,CADJ;AAyBH,CA9BD;;AAgCA,eAAeX,aAAf","sourcesContent":["import React, { useState } from \"react\";\nconst CountrySearch = ({countries}) => {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n\n    console.log(countries);\n    return (\n        <div>\n            <h1>Country Search</h1>\n            <span> Some random text </span>\n            <div>\n                <input type=\"text\" placeholder=\"Search country...\" onChange={event => {\n                    setSearchTerm(event.target.value)\n                }}/>\n                {countries.filter((val) => {\n                    if (searchTerm == \"\") {\n                        return \"\"\n                    } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                        return val\n                    }\n                }).map((val, key) => {\n                    return (\n                        <div key={key}> \n                            <p> {val.name} </p>\n                        </div>\n                    )\n                })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default CountrySearch;"]},"metadata":{},"sourceType":"module"}