{"ast":null,"code":"var _jsxFileName = \"/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/GetCountries/GetCountries.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LIST_COUNTRIES } from \"../../GraphQL/Queries\";\n\nconst GetCountries = () => {\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(LIST_COUNTRIES);\n  const [isLoading, setIsLoading] = useState(false); // const [countries, setCountries] = useState([]);\n\n  const countries = [];\n  useEffect(() => {\n    if (data) {\n      data.countries.map(country => countries.push(country));\n    } else if (error) {\n      console.log(error);\n    }\n\n    console.log(countries);\n  }, [error, data, countries]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default GetCountries;","map":{"version":3,"sources":["/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/GetCountries/GetCountries.js"],"names":["React","useEffect","useState","useQuery","gql","LIST_COUNTRIES","GetCountries","error","loading","data","isLoading","setIsLoading","countries","map","country","push","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;AACA,SAAQC,cAAR,QAA6B,uBAA7B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAyBN,QAAQ,CAACE,cAAD,CAAvC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C,CAFuB,CAGvB;;AACA,QAAMU,SAAS,GAAG,EAAlB;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,IAAJ,EAAU;AACVA,MAAAA,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmBC,OAAO,IACtBF,SAAS,CAACG,IAAV,CAAeD,OAAf,CADJ;AAGC,KAJD,MAIO,IAAIP,KAAJ,EAAW;AACdS,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACH;;AACDS,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACH,GATQ,EASN,CAACL,KAAD,EAAOE,IAAP,EAAaG,SAAb,CATM,CAAT;AAWA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAOH,CAxBD;;AAyBA,eAAeN,YAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useQuery, gql} from \"@apollo/client\";\nimport {LIST_COUNTRIES} from \"../../GraphQL/Queries\";\n\nconst GetCountries = () => {\n    const {error, loading, data} = useQuery(LIST_COUNTRIES);\n    const [isLoading, setIsLoading] = useState(false);\n    // const [countries, setCountries] = useState([]);\n    const countries = [];\n\n    useEffect(() => {\n        if (data) {\n        data.countries.map(country => (\n            countries.push(country)\n        ))\n        } else if (error) {\n            console.log(error);\n        }\n        console.log(countries);\n    }, [error,data, countries])\n\n    return(\n        <div> \n            {/* {data.countries.map((val) => {\n            return <span> {val.name} </span> \n            })}  */}\n        </div>\n    ) \n};\nexport default GetCountries;"]},"metadata":{},"sourceType":"module"}