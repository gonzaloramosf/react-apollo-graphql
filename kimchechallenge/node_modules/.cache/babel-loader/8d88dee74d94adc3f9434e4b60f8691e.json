{"ast":null,"code":"var _jsxFileName = \"/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./CountrySearch.css\";\n\nconst CountrySearch = ({\n  countries\n}) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [groupBy, setGroupBy] = useState([]);\n  const [groupCondition, setGroupCondition] = useState(true);\n\n  const handleClick = n => {\n    // handling the group by continent or language\n    if (n === 1) {\n      setGroupCondition(true);\n    } else if (n === 0) {\n      setGroupCondition(false);\n    }\n  }; // when searchTerm changes in the input\n  // or groupCondition change\n\n\n  useEffect(() => {\n    if (groupCondition) {\n      // search by continent\n      // and making the continent grouping\n      setGroupBy(Object.entries(countries.filter(val => {\n        if (searchTerm === \"\") {\n          return \"\";\n        } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())) {\n          return val;\n        }\n      }).reduce((res, val) => {\n        if (!res[val.continent.name]) {\n          res[val.continent.name] = [];\n        }\n\n        res[val.continent.name].push(val);\n        return res;\n      }, {})));\n    } else if (!groupCondition) {\n      // search by languages\n      // and making the language grouping\n      setGroupBy(Object.entries(countries.filter(val => {\n        if (searchTerm === \"\") {\n          return \"\";\n        } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())) {\n          return val;\n        }\n      }).reduce((res, val) => {\n        val.languages.map(lan => {\n          const group = res[lan.name] || [];\n          group.push(val);\n          res[lan.name] = group;\n        });\n        return res;\n      }, {})));\n    }\n  }, [searchTerm, groupCondition]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Country Search\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \" Search countries by continent or languages \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchResults\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Type to search country . . .\",\n    onChange: event => {\n      setSearchTerm(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"groupBy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \" Group by: \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: groupCondition ? 'activeButton' : '',\n    onClick: () => handleClick(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \" Continent \"), /*#__PURE__*/React.createElement(\"button\", {\n    className: !groupCondition ? 'activeButton' : '',\n    onClick: () => handleClick(0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \" Language \"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, groupBy.map(([continentOrLan, countries]) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    key: continentOrLan,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, continentOrLan), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"countriesContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, countries.map(({\n    name,\n    languages,\n    emoji,\n    capital,\n    currency\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"countryInfo\",\n    key: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, emoji), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, \" \", name, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 23\n    }\n  }, \" Capital: \", capital, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }\n  }, \" Currency: \", currency, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"languages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }, \" Languages: \"), languages.map(({\n    name\n  }) => /*#__PURE__*/React.createElement(\"span\", {\n    key: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 27\n    }\n  }, \" \", name)))))))))));\n};\n\nexport default CountrySearch;","map":{"version":3,"sources":["/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js"],"names":["React","useEffect","useState","CountrySearch","countries","searchTerm","setSearchTerm","groupBy","setGroupBy","groupCondition","setGroupCondition","handleClick","n","Object","entries","filter","val","name","toLowerCase","includes","reduce","res","continent","push","languages","map","lan","group","event","target","value","continentOrLan","emoji","capital","currency"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./CountrySearch.css\";\n\nconst CountrySearch = ({countries}) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [groupBy, setGroupBy] = useState([]);\n  const [groupCondition, setGroupCondition] = useState(true);\n\n  const handleClick = (n) => {\n    // handling the group by continent or language\n    if (n === 1) {\n      setGroupCondition(true);\n    } else if (n === 0) {\n      setGroupCondition(false);\n    }\n  }\n\n  // when searchTerm changes in the input\n  // or groupCondition change\n  useEffect(() => {\n    if (groupCondition) {\n      // search by continent\n      // and making the continent grouping\n      setGroupBy(Object.entries(\n        countries.filter((val) => {\n          if (searchTerm === \"\") {\n            return \"\"\n          } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n            return val\n          }\n        }).reduce((res, val) => {\n          if (!res[val.continent.name]) {\n            res[val.continent.name] = [];\n          }\n          res[val.continent.name].push(val);\n          return res;\n        }, {})\n      ))  \n    } else if (!groupCondition) {\n      // search by languages\n      // and making the language grouping\n      setGroupBy(Object.entries(\n        countries.filter((val) => {\n          if (searchTerm === \"\") {\n            return \"\"\n          } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n            return val\n          }\n        }).reduce((res, val) => {\n          val.languages.map(lan => {\n            const group = res[lan.name] || [];\n            group.push(val);\n            res[lan.name] = group;\n          })\n          return res;\n        }, {})\n      ))  \n    }\n  }, [searchTerm, groupCondition])\n\n  return (\n    <div className=\"search\">\n      <h1>Country Search</h1>\n      <span> Search countries by continent or languages </span>\n      <div className=\"searchResults\">\n        <input type=\"text\" placeholder=\"Type to search country . . .\" onChange={event => {\n          setSearchTerm(event.target.value)\n        }}/>\n        <div className=\"groupBy\">\n          <h2> Group by: </h2>\n          <div>\n            <button className={(groupCondition) ? 'activeButton' : ''} onClick={() => handleClick(1)}> Continent </button>\n            <button className={!(groupCondition) ? 'activeButton' : ''} onClick={() => handleClick(0)}> Language </button>\n          </div>\n        </div>\n        <div>\n          {\n            groupBy.map(([continentOrLan, countries]) => (\n              <div className=\"container\" key={continentOrLan}>\n                <h2>{continentOrLan}</h2>\n                <div className=\"countriesContainer\">\n                  {countries.map(({name, languages, emoji, capital, currency}) => (\n                    <div className=\"countryInfo\" key={name}>\n                      <div>\n                        <span>{emoji}</span>\n                        <h3> {name} </h3>\n                      </div>\n                      <p> Capital: {capital} </p>\n                      <p> Currency: {currency} </p>\n                      <div className=\"languages\"> \n                        <p> Languages: </p>\n                        {languages.map(({ name }) => (\n                          <span key={name}> {name}</span>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default CountrySearch;"]},"metadata":{},"sourceType":"module"}