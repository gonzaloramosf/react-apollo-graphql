{"ast":null,"code":"var _jsxFileName = \"/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./CountrySearch.css\";\n\nconst CountrySearch = ({\n  countries\n}) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [groupBy, setGroupBy] = useState([]);\n  useEffect(() => {\n    // search by continent\n    setGroupBy(Object.entries(countries.filter(val => {\n      if (searchTerm === \"\") {\n        return \"\";\n      } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())) {\n        return val;\n      }\n    }).reduce((res, val) => {\n      if (!res[val.continent.name]) {\n        res[val.continent.name] = [];\n      }\n\n      res[val.continent.name].push(val);\n      return res;\n    }, {}))); // search by languages\n    // setGroupBy(Object.entries(\n    //   countries.filter((val) => {\n    //     if (searchTerm === \"\") {\n    //       return \"\"\n    //     } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n    //       return val\n    //     }\n    //   }).reduce((res, val) => {\n    //     val.languages.map(lan => {\n    //       const group = res[lan.name] || [];\n    //       group.push(val);\n    //       res[lan.name] = group;\n    //     })\n    //     return res;\n    //   }, {})\n    // ))  \n  }, [searchTerm]);\n  console.log(groupBy);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"Country Search\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \" Some random text \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchResults\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search country...\",\n    onChange: event => {\n      setSearchTerm(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"groupBy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \" Group by: \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \" Continent \"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \" Language \"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, groupBy.map((val, key) => {\n    console.log(val);\n  }))));\n};\n\nexport default CountrySearch;\n{\n  /* \n  <div className=\"search\">\n  <h1>Country Search</h1>\n  <span> Some random text </span>\n  <div className=\"searchResults\">\n     <input type=\"text\" placeholder=\"Search country...\" onChange={event => {\n         setSearchTerm(event.target.value)\n     }}/>\n     <div className=\"groupBy\">\n         <h2> Group by: </h2>\n         <div>\n             <button> Continent </button>\n             <button> Language </button>\n         </div>\n     </div>\n      <div>\n         {countries.filter((val) => {\n             if (searchTerm === \"\") {\n                 return \"\"\n             } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                 return val\n             }\n         }).map((val, key) => {\n             return (\n                 <div key={key}>\n                     <h2> {val.continent.name} </h2> \n                     <div className=\"countryInfo\">\n                         <div>\n                             <span>{val.emoji}</span>\n                             <h3> {val.name} </h3>\n                         </div>\n                         <p> Capital: {val.capital} </p>\n                         <p> Currency: {val.currency} </p>\n                     </div>\n                 </div>\n             )\n         })\n         }\n     </div>\n  </div>\n  </div> */\n}","map":{"version":3,"sources":["/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js"],"names":["React","useEffect","useState","CountrySearch","countries","searchTerm","setSearchTerm","groupBy","setGroupBy","Object","entries","filter","val","name","toLowerCase","includes","reduce","res","continent","push","console","log","event","target","value","map","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,qBAAP;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AACrC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAO,IAAAA,UAAU,CAACC,MAAM,CAACC,OAAP,CACTN,SAAS,CAACO,MAAV,CAAkBC,GAAD,IAAS;AACxB,UAAIP,UAAU,KAAK,EAAnB,EAAuB;AACrB,eAAO,EAAP;AACD,OAFD,MAEO,IAAIO,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCV,UAAU,CAACS,WAAX,EAAhC,CAAJ,EAA8D;AACnE,eAAOF,GAAP;AACD;AACF,KAND,EAMGI,MANH,CAMU,CAACC,GAAD,EAAML,GAAN,KAAc;AACtB,UAAI,CAACK,GAAG,CAACL,GAAG,CAACM,SAAJ,CAAcL,IAAf,CAAR,EAA8B;AAC5BI,QAAAA,GAAG,CAACL,GAAG,CAACM,SAAJ,CAAcL,IAAf,CAAH,GAA0B,EAA1B;AACD;;AACDI,MAAAA,GAAG,CAACL,GAAG,CAACM,SAAJ,CAAcL,IAAf,CAAH,CAAwBM,IAAxB,CAA6BP,GAA7B;AACA,aAAOK,GAAP;AACD,KAZD,EAYG,EAZH,CADS,CAAD,CAAV,CAFc,CAkBd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GApCQ,EAoCN,CAACZ,UAAD,CApCM,CAAT;AAsCAe,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF,eAGE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,mBAA/B;AAAmD,IAAA,QAAQ,EAAEe,KAAK,IAAI;AACpEhB,MAAAA,aAAa,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAIE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CAFF,CAJF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIjB,OAAO,CAACkB,GAAR,CAAY,CAACb,GAAD,EAAMc,GAAN,KAAc;AACxBN,IAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AACD,GAFD,CAFJ,CAXF,CAHF,CADF;AAyBD,CArED;;AAsEA,eAAeT,aAAf;AAQA;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCS","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./CountrySearch.css\";\n\nconst CountrySearch = ({countries}) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [groupBy, setGroupBy] = useState([]);\n\n  useEffect(() => {\n    // search by continent\n    setGroupBy(Object.entries(\n      countries.filter((val) => {\n        if (searchTerm === \"\") {\n          return \"\"\n        } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n          return val\n        }\n      }).reduce((res, val) => {\n        if (!res[val.continent.name]) {\n          res[val.continent.name] = [];\n        }\n        res[val.continent.name].push(val);\n        return res;\n      }, {})\n    ))  \n\n    // search by languages\n\n    // setGroupBy(Object.entries(\n    //   countries.filter((val) => {\n    //     if (searchTerm === \"\") {\n    //       return \"\"\n    //     } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n    //       return val\n    //     }\n    //   }).reduce((res, val) => {\n    //     val.languages.map(lan => {\n    //       const group = res[lan.name] || [];\n    //       group.push(val);\n    //       res[lan.name] = group;\n    //     })\n    //     return res;\n    //   }, {})\n    // ))  \n  }, [searchTerm])\n\n  console.log(groupBy);\n\n  return (\n    <div className=\"search\">\n      <h1>Country Search</h1>\n      <span> Some random text </span>\n      <div className=\"searchResults\">\n        <input type=\"text\" placeholder=\"Search country...\" onChange={event => {\n          setSearchTerm(event.target.value)\n        }}/>\n        <div className=\"groupBy\">\n          <h2> Group by: </h2>\n          <div>\n            <button> Continent </button>\n            <button> Language </button>\n          </div>\n        </div>\n        <div>\n          {\n            groupBy.map((val, key) => {\n              console.log(val);\n            })\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default CountrySearch;\n\n\n\n\n\n\n\n{/* \n<div className=\"search\">\n<h1>Country Search</h1>\n<span> Some random text </span>\n<div className=\"searchResults\">\n    <input type=\"text\" placeholder=\"Search country...\" onChange={event => {\n        setSearchTerm(event.target.value)\n    }}/>\n    <div className=\"groupBy\">\n        <h2> Group by: </h2>\n        <div>\n            <button> Continent </button>\n            <button> Language </button>\n        </div>\n    </div>\n\n    <div>\n        {countries.filter((val) => {\n            if (searchTerm === \"\") {\n                return \"\"\n            } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                return val\n            }\n        }).map((val, key) => {\n            return (\n                <div key={key}>\n                    <h2> {val.continent.name} </h2> \n                    <div className=\"countryInfo\">\n                        <div>\n                            <span>{val.emoji}</span>\n                            <h3> {val.name} </h3>\n                        </div>\n                        <p> Capital: {val.capital} </p>\n                        <p> Currency: {val.currency} </p>\n                    </div>\n                </div>\n            )\n        })\n        }\n    </div>\n</div>\n</div> */}"]},"metadata":{},"sourceType":"module"}