{"ast":null,"code":"var _jsxFileName = \"/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js\";\nimport React, { useState } from \"react\";\nimport \"./CountrySearch.css\";\n\nconst CountrySearch = ({\n  countries\n}) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchResults\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: searchTerm,\n    onChange: ({\n      target\n    }) => setSearchTerm(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }\n  }), Object.entries(countries.filter(c => c.name.toLowerCase().includes(searchTerm.toLowerCase())).reduce((res, c) => {\n    if (!res[c.continent.name]) {\n      res[c.continent.name] = [];\n    }\n\n    res[c.continent.name].push(c);\n    return res;\n  }, {})).map(([continent, countries]) => /*#__PURE__*/React.createElement(\"ul\", {\n    key: continent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }, continent), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, countries.map(({\n    name,\n    languages\n  }) => /*#__PURE__*/React.createElement(\"li\", {\n    key: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }\n  }, name), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 23\n    }\n  }, languages.map(({\n    name\n  }) => /*#__PURE__*/React.createElement(\"li\", {\n    key: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 27\n    }\n  }, name))))))))));\n};\n\nexport default CountrySearch;\n{\n  /* <div className=\"search\">\n  <h1>Country Search</h1>\n  <span> Some random text </span>\n  <div className=\"searchResults\">\n     <input type=\"text\" placeholder=\"Search country...\" onChange={event => {\n         setSearchTerm(event.target.value)\n     }}/>\n     <div className=\"groupBy\">\n         <h2> Group by: </h2>\n         <div>\n             <button> Continent </button>\n             <button> Language </button>\n         </div>\n     </div>\n      <div>\n         {countries.filter((val) => {\n             if (searchTerm === \"\") {\n                 return \"\"\n             } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                 return val\n             }\n         }).map((val, key) => {\n             return (\n                 <div key={key}>\n                     <h2> {val.continent.name} </h2> \n                     <div className=\"countryInfo\">\n                         <div>\n                             <span>{val.emoji}</span>\n                             <h3> {val.name} </h3>\n                         </div>\n                         <p> Capital: {val.capital} </p>\n                         <p> Currency: {val.currency} </p>\n                     </div>\n                 </div>\n             )\n         })\n         }\n     </div>\n  </div>\n  </div> */\n}","map":{"version":3,"sources":["/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/CountrySearch/CountrySearch.js"],"names":["React","useState","CountrySearch","countries","searchTerm","setSearchTerm","target","value","Object","entries","filter","c","name","toLowerCase","includes","reduce","res","continent","push","map","languages"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,qBAAP;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AACnC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAEG,UAFT;AAGE,IAAA,QAAQ,EAAE,CAAC;AAAEE,MAAAA;AAAF,KAAD,KAAgBD,aAAa,CAACC,MAAM,CAACC,KAAR,CAHzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAMGC,MAAM,CAACC,OAAP,CACCN,SAAS,CACNO,MADH,CACWC,CAAD,IACNA,CAAC,CAACC,IAAF,CAAOC,WAAP,GAAqBC,QAArB,CAA8BV,UAAU,CAACS,WAAX,EAA9B,CAFJ,EAIGE,MAJH,CAIU,CAACC,GAAD,EAAML,CAAN,KAAY;AAClB,QAAI,CAACK,GAAG,CAACL,CAAC,CAACM,SAAF,CAAYL,IAAb,CAAR,EAA4B;AAC1BI,MAAAA,GAAG,CAACL,CAAC,CAACM,SAAF,CAAYL,IAAb,CAAH,GAAwB,EAAxB;AACD;;AACDI,IAAAA,GAAG,CAACL,CAAC,CAACM,SAAF,CAAYL,IAAb,CAAH,CAAsBM,IAAtB,CAA2BP,CAA3B;AACA,WAAOK,GAAP;AACD,GAVH,EAUK,EAVL,CADD,EAYCG,GAZD,CAYK,CAAC,CAACF,SAAD,EAAYd,SAAZ,CAAD,kBACJ;AAAI,IAAA,GAAG,EAAEc,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,SAAN,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,SAAS,CAACgB,GAAV,CAAc,CAAC;AAAEP,IAAAA,IAAF;AAAQQ,IAAAA;AAAR,GAAD,kBACb;AAAI,IAAA,GAAG,EAAER,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,IAAN,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,SAAS,CAACD,GAAV,CAAc,CAAC;AAAEP,IAAAA;AAAF,GAAD,kBACb;AAAI,IAAA,GAAG,EAAEA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBA,IAAhB,CADD,CADH,CAFF,CADD,CADH,CAFF,CADF,CAbD,CANH,CADJ;AAwCH,CA3CD;;AA4CA,eAAeV,aAAf;AAQA;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCS","sourcesContent":["import React, { useState } from \"react\";\nimport \"./CountrySearch.css\";\n\nconst CountrySearch = ({countries}) => {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    return (\n        <div className=\"searchResults\">\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={({ target }) => setSearchTerm(target.value)}\n          />\n          {Object.entries(\n            countries\n              .filter((c) =>\n                c.name.toLowerCase().includes(searchTerm.toLowerCase())\n              )\n              .reduce((res, c) => {\n                if (!res[c.continent.name]) {\n                  res[c.continent.name] = [];\n                }\n                res[c.continent.name].push(c);\n                return res;\n              }, {})\n          ).map(([continent, countries]) => (\n            <ul key={continent}>\n              <li>\n                <div>{continent}</div>\n                <ul>\n                  {countries.map(({ name, languages }) => (\n                    <li key={name}>\n                      <div>{name}</div>\n                      <ul>\n                        {languages.map(({ name }) => (\n                          <li key={name}>{name}</li>\n                        ))}\n                      </ul>\n                    </li>\n                  ))}\n                </ul>\n              </li>\n            </ul>\n          ))}\n        </div>\n      );\n}\nexport default CountrySearch;\n\n\n\n\n\n\n\n{/* <div className=\"search\">\n<h1>Country Search</h1>\n<span> Some random text </span>\n<div className=\"searchResults\">\n    <input type=\"text\" placeholder=\"Search country...\" onChange={event => {\n        setSearchTerm(event.target.value)\n    }}/>\n    <div className=\"groupBy\">\n        <h2> Group by: </h2>\n        <div>\n            <button> Continent </button>\n            <button> Language </button>\n        </div>\n    </div>\n\n    <div>\n        {countries.filter((val) => {\n            if (searchTerm === \"\") {\n                return \"\"\n            } else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                return val\n            }\n        }).map((val, key) => {\n            return (\n                <div key={key}>\n                    <h2> {val.continent.name} </h2> \n                    <div className=\"countryInfo\">\n                        <div>\n                            <span>{val.emoji}</span>\n                            <h3> {val.name} </h3>\n                        </div>\n                        <p> Capital: {val.capital} </p>\n                        <p> Currency: {val.currency} </p>\n                    </div>\n                </div>\n            )\n        })\n        }\n    </div>\n</div>\n</div> */}"]},"metadata":{},"sourceType":"module"}