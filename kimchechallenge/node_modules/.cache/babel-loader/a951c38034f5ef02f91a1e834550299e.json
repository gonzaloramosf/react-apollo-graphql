{"ast":null,"code":"var _jsxFileName = \"/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/GetCountries/GetCountries.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { LIST_COUNTRIES } from \"../../GraphQL/Queries\";\nimport CountrySearch from \"../CountrySearch/CountrySearch\";\nimport \"./GetCountriesStyles.css\";\n\nconst GetCountries = () => {\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(LIST_COUNTRIES);\n  const [isLoading, setIsLoading] = useState(false);\n  const countries = [];\n  useEffect(() => {\n    // consulting if is loading\n    if (loading) {\n      setIsLoading(true);\n    } // only if data arrives or there is an error \n\n\n    if (data) {\n      data.countries.map(country => countries.push(country));\n      setIsLoading(false);\n    } else if (error) {\n      console.log(error);\n      setIsLoading(false);\n    }\n  }, [error, loading, data, countries]);\n  return (\n    /*#__PURE__*/\n    // if the LIST_COUNTRIES loading show message\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, isLoading ? /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 26\n      }\n    }, \" loading... \") : /*#__PURE__*/React.createElement(CountrySearch, {\n      countries: countries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 70\n      }\n    }))\n  );\n};\n\nexport default GetCountries;","map":{"version":3,"sources":["/home/gonzalo/dev-challenge-kimche/dev-challenge-template-master/kimchechallenge/src/Components/GetCountries/GetCountries.js"],"names":["React","useEffect","useState","useQuery","LIST_COUNTRIES","CountrySearch","GetCountries","error","loading","data","isLoading","setIsLoading","countries","map","country","push","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,cAAR,QAA6B,uBAA7B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAO,0BAAP;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAyBN,QAAQ,CAACC,cAAD,CAAvC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMU,SAAS,GAAG,EAAlB;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIO,OAAJ,EAAa;AACTG,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,KAJW,CAKZ;;;AACA,QAAIF,IAAJ,EAAU;AACNA,MAAAA,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmBC,OAAO,IACtBF,SAAS,CAACG,IAAV,CAAeD,OAAf,CADJ;AAGAH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KALD,MAKO,IAAIJ,KAAJ,EAAW;AACdS,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACAI,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAfQ,EAeN,CAACJ,KAAD,EAAQC,OAAR,EAAiBC,IAAjB,EAAuBG,SAAvB,CAfM,CAAT;AAiBA;AAAA;AACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,SAAS,gBAAG;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAH,gBAA+C,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAEE,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD7D;AAFJ;AAMH,CA5BD;;AA6BA,eAAeN,YAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useQuery} from \"@apollo/client\";\nimport {LIST_COUNTRIES} from \"../../GraphQL/Queries\";\nimport CountrySearch from \"../CountrySearch/CountrySearch\";\nimport \"./GetCountriesStyles.css\";\n\nconst GetCountries = () => {\n    const {error, loading, data} = useQuery(LIST_COUNTRIES);\n    const [isLoading, setIsLoading] = useState(false);\n    const countries = [];\n\n    useEffect(() => {\n        // consulting if is loading\n        if (loading) {\n            setIsLoading(true);\n        }\n        // only if data arrives or there is an error \n        if (data) {\n            data.countries.map(country => (\n                countries.push(country)\n            ))\n            setIsLoading(false);\n        } else if (error) {\n            console.log(error);\n            setIsLoading(false);\n        }\n    }, [error, loading, data, countries])\n\n    return(\n        // if the LIST_COUNTRIES loading show message\n        <div> \n            {isLoading ? <h3 className=\"loading\"> loading... </h3> : <CountrySearch countries={countries}/>}\n        </div>\n    ) \n};\nexport default GetCountries;"]},"metadata":{},"sourceType":"module"}